from phaxio import PhaxioApi
import os

phaxio_api_key    = os.environ.get('PHAXIO_API_KEY')
phaxio_api_secret = os.environ.get('PHAXIO_API_SECRET')
health_fax_number = os.environ.get('HEALTH_FAX_NUMBER')

api = PhaxioApi(phaxio_api_key, phaxio_api_secret)
api.health_fax_number = health_fax_number


def create_header_string():
    return ("This is a fax generated by the Kansas City, "
            "Missouri Health Department's FaxVax Service. "
            "If you have any questions fulfiling it, "
            "please contact us at __________.")


def get_key_from_tuple_list(key: str, string_map: list=[]) -> tuple:
    return_tuple = next(
        (
            (value[1], index)
            for index, value
            in enumerate(string_map)
            if value[0]==key
        ),
        None
    )
    if return_tuple is None:
        return_tuple = (key, -1)
    return return_tuple


def build_string_from_dict(input_data: dict, string_map: list=[]) -> str:
    ordered_list   = []
    unordered_list = []
    for key, value in input_data.items():
        key_tuple = get_key_from_tuple_list(key, string_map) + (value,)
        if key_tuple[1] is not -1:
            ordered_list.append(key_tuple)
        else:
            unordered_list.append(key_tuple)
    ordered_list = sorted(ordered_list, key=lambda x: x[1])
    final_list = ordered_list + unordered_list[::-1]
    final_string_list = ["{0}: {1}".format(item[0], item[2])
                         for item in final_list]
    final_string = "\n".join(final_string_list)
    return final_string


def create_faxio_string(input_data: dict) -> str:
    required_fields = [
    "child_name", "child_dob", "school_district", "school_name",
    "school_fax", "requestor_name", "requestor_contact"
    ]
    missing_fields = [field for field in required_fields
                      if field not in input_data]
    if any(missing_fields):
        raise ValueError("The input was missing the following fields: {0}"
            .format(missing_fields))
    string_map = [
        ("child_name", "Child Name"),
        ("child_dob", "Child DOB"),
        ("school_district", "School District"),
        ("school_name", "School Name"),
        ("school_fax", "School Fax"),
        ("requestor_name", "Requestor Name"),
        ("requestor_contact", "Requestor Contact Info")
    ]
    return build_string_from_dict(input_data, string_map)

def make_faxio_request(fax_info_dict: dict) -> str:
    fax_info_dict['string_data_type'] = 'text'
    fax_info_dict['to'] = [api.health_fax_number]
    return api.send(**fax_info_dict)
